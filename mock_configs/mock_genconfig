#!/usr/bin/env python
import re
import os
import argparse
import json
import logging

import requests


class WrongOptionFormat(Exception):
    pass


class WrongRepoFormat(Exception):
    pass


def gen_intial_config_opts():
    return {
        'environment': {},
        'plugin_conf': {},
    }


def parse_option(string):
    if '=' not in string:
        raise WrongOptionFormat('Option specification "%s" does not match '
                                '"key=value" format' % string)
    return string.split('=', 1)


def parse_repo(string):
    if ',' not in string:
        raise WrongRepoFormat('Repo specification "%s" does not match '
                              '"name,url" format' % string)
    name, url = string.split(',', 1)
    if not re.match(r'^(https?|file|ftps?)://.*$', url):
        raise WrongRepoFormat('Wrong url specified on "%s"' % string)
    return (name, url)


def get_repos(repos):
    repos_str = ''
    for repo in repos:
        name, url = parse_repo(repo)
        repos_str += '''
[{name}]
name={name}
baseurl={url}
gpgcheck=0
enabled=1
metadata_expire=30m
'''.format(name=name, url=url)
    return repos_str


def dumps_dict(to_dump, dict_name):
    result_lines = []
    for key, value in to_dump.iteritems():
        if key != 'yum.conf':
            keys = key.split('.')
        else:
            keys = [key]
        key = '"]["'.join(keys)
        result_lines.append('%s["%s"]=%r' % (
            dict_name,
            key,
            value))
    return '\n'.join(result_lines)


def check_proxy(proxy_url, test_url='http://proxy.phx.ovirt.org:5000/'):
    try:
        res = requests.get(test_url, proxies={'http': proxy_url}, timeout=5)
    except Exception as exc:
        logging.warn("Failed to contact proxy at %s", proxy_url)
        logging.warn(exc)
        return False
    if not res.ok:
        logging.warn("Failed to contact proxy at %s", proxy_url)
        logging.warn(
            "test_url: %s\nrepsonse code: %d\nresponse data:%s",
            res.url,
            res.status_code,
            res.text
        )
    return res.ok


def get_from_conf(what, conf_file):
    with open(conf_file) as cf_fd:
        for line in cf_fd:
            if line.strip().startswith(what + '='):
                return line.strip().split('=', 1)[-1]
    return False


def main():
    parser = argparse.ArgumentParser(
        description='This program generates a new mock configuration file from'
        ' a base configuration file adding the specified repositories and '
        'options'
    )

    parser.add_argument('--repo', dest='extra_repos', action='append',
                        default=[],
                        help='extra repository to add')
    parser.add_argument('--option', dest='options', action='append',
                        default=[],
                        help='extra options to set in the the config, they can '
                        'have multiple levels so for example '
                        'environment.MYVAR=MYVALUE will end up as '
                        'config_opts["environment"]["MYVAR"]="MYVALUE".'
                        ' Note that the value will be loaded as a json encoded '
                        'string if able')
    parser.add_argument('--base', dest='base_config', required=True,
                        help='path to the configuration to use as base')
    parser.add_argument('--name', dest='name', required=True,
                        help='new name for the config')
    parser.add_argument('--try-proxy', action='store_true',
                        help='Try using the proxied config first')
    args = parser.parse_args()

    config_opts = gen_intial_config_opts()

    base_config = args.base_config
    if args.try_proxy:
        proxied_config = args.base_config.replace('.cfg', '_proxied.cfg')
        if not os.path.exists(proxied_config):
            logging.warn("No proxied configuration found for %s", base_config)
        proxy_url = get_from_conf('proxy', proxied_config)
        if not proxy_url:
            logging.warn(
                "Unable to find proxy it in the config %s",
                proxied_config
            )
        repo_url = get_from_conf('baseurl', proxied_config)
        if check_proxy(proxy_url, repo_url):
            base_config = proxied_config
        else:
            logging.warn("Not using proxied configuration")

    # load base configuration
    execfile(base_config)

    # modify the base configuration to fit the new name
    config_opts['root'] = args.name

    # load extra options passed
    for option in args.options:
        key, val = parse_option(option)
        try:
            val = json.loads(val)
        except ValueError:
            pass
        config_opts[key] = val

    # add the extra repos passed
    config_opts['yum.conf'] = '%s' % (config_opts.get('yum.conf', '')
                                      + get_repos(args.extra_repos))

    print dumps_dict(config_opts, 'config_opts')


if __name__ == '__main__':
    logging.basicConfig()
    main()
