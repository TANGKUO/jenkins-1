#!/usr/bin/env python
import re
import argparse
import json


class WrongOptionFormat(Exception):
    pass


class WrongRepoFormat(Exception):
    pass


def parse_option(string):
    if '=' not in string:
        raise WrongOptionFormat('Option specification "%s" does not match '
                                '"key=value" format' % string)
    return string.split('=', 1)


def parse_repo(string):
    if ',' not in string:
        raise WrongRepoFormat('Repo specification "%s" does not match '
                              '"name,url" format' % string)
    name, url = string.split(',', 1)
    if not re.match(r'^(https?|file|ftps?)://.*$', url):
        raise WrongRepoFormat('Wrong url specified on "%s"' % string)
    return (name, url)


def get_repos(repos):
    repos_str = ''
    for repo in repos:
        name, url = parse_repo(repo)
        repos_str += '''
[{name}]
name={name}
baseurl={url}
gpgcheck=0
enabled=1
'''.format(name=name, url=url)
    return repos_str


def dumps_dict(to_dump, dict_name):
    result_lines = []
    for key, value in to_dump.iteritems():
        if key != 'yum.conf':
            keys = key.split('.')
        else:
            keys = [key]
        key = '"]["'.join(keys)
        result_lines.append('%s["%s"]=%r' % (
            dict_name,
            key,
            value))
    return '\n'.join(result_lines)


def main():
    parser = argparse.ArgumentParser(
        description='This program generates a new mock configuration file from'
        ' a base configuration file adding the specified repositories and '
        'options'
    )

    parser.add_argument('--repo', dest='extra_repos', action='append',
                        default=[],
                        help='extra repository to add')
    parser.add_argument('--option', dest='options', action='append',
                        default=[],
                        help='extra options to set in the the config, they can '
                        'have multiple levels so for example '
                        'environment.MYVAR=MYVALUE will end up as '
                        'config_opts["environment"]["MYVAR"]="MYVALUE".'
                        ' Note that the value will be loaded as a json encoded '
                        'string if able')
    parser.add_argument('--base', dest='base_config', required=True,
                        help='path to the configuration to use as base')
    parser.add_argument('--name', dest='name', required=True,
                        help='new name for the config')
    args = parser.parse_args()

    config_opts = {}

    # load base configuration
    execfile(args.base_config)

    # modify the base configuration to fit the new name
    config_opts['root'] = args.name

    # load extra options passed
    for option in args.options:
        key, val = parse_option(option)
        try:
            val = json.loads(val)
        except ValueError:
            pass
        config_opts[key] = val

    # add the extra repos passed
    config_opts['yum.conf'] = '%s' % (config_opts.get('yum.conf', '')
                                      + get_repos(args.extra_repos))
    print dumps_dict(config_opts, 'config_opts')


if __name__ == '__main__':
    main()
